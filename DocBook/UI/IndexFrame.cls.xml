<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="DocBook.UI.IndexFrame">
<Description>
Handles the indexing display</Description>
<Import>DocBook</Import>
<IncludeCode>DocBookMac</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeCreated>59241,40474</TimeCreated>

<Method name="DBMsg">
<Description>
Localizer for message fragments</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>cls:%String,num:%String,args...:%List</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit ##class(DocBook.L10N).DBMsg(cls, num, args...)
]]></Implementation>
</Method>

<Method name="OnPage">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// build tree
	Set tree = ##class(MenuTree).%New()
	
	&html<<html><head>>
	
	&html<<STYLE type="text/css">

	BODY			{ 
		background: #C0C0C0;
		background-image: url(images/grad-halfgray-10x500.png);
		background-repeat: repeat-x;
		font-family: Verdana; 
		line-height: 110%; }
	DIV.Title 	{ font-size: 10pt; color: darkblue; font-weight: bold; }
	
	A.CSPMenuItem1 { color: darkblue; font-size: 9pt; 
						font-weight: bold;
						font-family: Verdana; 
						text-decoration: none; 
						line-height: 120%; }
					
	A.CSPMenuItem2 { color: darkblue; font-size: 9pt; 
						font-family: Verdana; 
						text-decoration: none; 
						line-height: 120%; }

	A.CSPMenuItem3 { color: darkblue; font-size: 9pt; 
						font-family: Verdana; 
						text-decoration: none; 
						line-height: 120%; }

	A.CSPMenuItem1:hover, 
	A.CSPMenuItem2:hover, 
	A.CSPMenuItem3:hover { color: red; }

	A.CSPMenuItem1:visited, 
	A.CSPMenuItem2:visited, 
	A.CSPMenuItem3:visited { color: darkblue; }
	
	.Title A,
	.Title A:visited {
		color: darkblue;
		text-decoration: none;
		white-space: nowrap;
	}

	.Title A:hover {
		color: red;
		text-decoration: none; 
	}

	INPUT		{ color: darkblue; font-size: 0.8em; }
	
	</STYLE>
	<LINK REL="stylesheet" TYPE="text/css" HREF="docbook_menu.css" TITLE="Standard Style" >>


	Set msgTop = $$$T("Go to main list")
	&html<<SCRIPT LANGUAGE=JavaScript SRC="jquery-1.12.1.min.js"> </SCRIPT>>
	&html<<SCRIPT LANGUAGE="JavaScript">
	
	var CurrentBook = '';


	
	// find location of current page
	function updateLocation()
	{		
		var key = '';
		var book = '';
		var query = '';		
		
		if (parent != null && 
			 parent.PageFrame != null 
			 && parent.PageFrame.getCurretnKey != null 
			 //&& parent.PageFrame.QuickSearch != null && 
			 //&& parent.PageFrame.KEY != null 
			 ) {

			key = parent.PageFrame.getCurretnKey();
			
			if (key != "") {
				book = key.split("_")[0];
			}
			
			if (key != '') {
				query = '?KEY=' + key + '#' + key;
			}		
			if (book != CurrentBook) {
				// reload
				CurrentBook = book;
				self.document.location = 'DocBook.UI.IndexFrame.cls' + query;
			}
			else {
				// just change highlight
				highlightItem(key, true);
			}
		}
		
		return true;
	}
	
	function goHome()
	{
		self.document.location = 'DocBook.UI.IndexFrame.cls';
		return true;
	}
	</SCRIPT>>

	Do tree.ShowJS()
	
	Set key = $G(%request.Data("KEY",1))
	Set book = ""
	Set bookKey = ""
	
	If ($E(key,1,1) = "A") {
		// !!!
		Set bookKey = key
		Set key = "KNBASE"
	}
	
	If ((key '= "") && (key '= "KNBASE")) {
		// pull out first part of key
		Set bookKey = $P(key,"_",1)
		Set book = ##class(book).OpenKey(bookKey)
	}

	If (book = "") {
		If (key = "KNBASE") {
			&html<<base target="PageFrame"></head><body>>
			Set bookKey = "KNBASE"
 
	 		// list all articles
			Set page = "DocBook.UI.Page.cls"
	
			Write "<DIV CLASS=""Title"">"
			Write "<A TARGET='_top' HREF='DocBook.UI.FrameSet.cls' class='backButton' title='"_msgTop_"'>&laquo; Back</A> "
			Write "Technical Articles</DIV><HR>",!
	
			Do ..GetKNBase(.items, page)
		}
		Else {
			// main list
			&html<<base target="_top"></head><body>>
			Set bookKey = ""
 
	 		// list all books
			Set page = "DocBook.UI.FrameSet.cls"
	
			Write "<A name=""frametop""></A>",!
			Write "<DIV CLASS=""Title MainHeader""><span>"_$$$T("InterSystems Documentation")_"</span></DIV><HR>",!
			Write "<div class='searchButton' onclick=''><input id='searchTextBox' placeholder='search' onkeypress='return doSearchByEnter(event)' onclick='return false;' type='text'/ ><a onclick='doSearch();' >Go</a></div>",!
			Do ..GetSets(.items, page)
		}
	}
	Else {
				
		&html<<base target="PageFrame">
		</head>
		<body>>
		
		// TOC for current book
		Set page = "DocBook.UI.Page.cls"
	
		// fill in tree
		Write "<DIV CLASS=""Title BookHeader"">"
		Write "<A TARGET='_top' HREF='DocBook.UI.FrameSet.cls' class='backButton' title='"_msgTop_"'>&laquo; Back</A> "
		Write "<span>"_book.title,"</span></DIV>"
		Write "<HR>",!

		Do ..GetComponents(book.%Id(),.items,page)
	}

	Merge tree.Items = items
	Write "<A name=""TreeTop""></A>",!
	Do tree.ShowTree(key)
	
	&html<<SCRIPT LANGUAGE="JavaScript">
		CurrentBook = '#(bookKey)#';
	 </SCRIPT>>

	Write "<HR><DIV CLASS=""Title TopOfList""><A HREF=""#TreeTop"" TARGET=""TOCFrame"">"_$$$T("[Top of List]")_"</A></DIV>",!

  &html<<SCRIPT LANGUAGE=JavaScript>
		function doSearchByEnter(e) {		    
			if(e.keyCode == 13) {
		    	doSearch();
			}
		    return true;
		}
		
		function doSearch() {		    
			if (parent != null && 
			 		parent.PageFrame != null
			 	){
					 var kw = document.getElementById("searchTextBox").value;
				 	parent.PageFrame.document.location = 'DocBook.UI.SearchPageZen.cls?KeyWord=' + escape(kw);
			}
		    return true;
		} 
		
		$(function () {			
			$('[data-set]').click(function () {
				if (parent != null && 
			 		parent.PageFrame != null
			 	){
				 	var setId = $(this).attr('data-set');				 	
				 	parent.PageFrame.document.location = 'DocBook.UI.Page.cls?SET=' + escape(setId);
				}
				return false;				
			});
		});
    </SCRIPT>>

	&html<</body>
	</html>>
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetComponents">
<Description>
Show the list of components for a book</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[ctrid:id,&tname:cdata,page:cdata,n:dbint=0]]></FormalSpec>
<Implementation><![CDATA[
	New %ISCDBCounter
	Set %ISCDBCounter = $INCREMENT(^||DocBook.CursorCount)
	Kill %DocBookCursor(%ISCDBCounter)
#EXECUTE Set %msqlvar = "%DocBookCursor(%ISCDBCounter"

	Set lastcls = ""
	Set introkey = ""

	// loop over components
	&sql(DECLARE CompCursor CURSOR FOR
		SELECT ID,blockid, title, x__classname
		INTO :compid,:key, :title, :cls
		FROM component
		WHERE container = :ctrid
		ORDER BY blockpos
	)
	
	&sql(OPEN CompCursor)
	&sql(FETCH CompCursor)

	Set n = n + 1
	While (SQLCODE = 0) {

		// error detection
		Set:title="" title = key _ " (untitled)"

		If (cls [ "part") {
			// link to intro for Part in menu
			
			&sql(SELECT intro->blockid INTO :introkey 
					FROM DocBook.part
					WHERE %ID = :compid)
			
			If (introkey '= "") {
				Set tname(n) = $LB(title,page_"?KEY="_introkey,introkey)
			}
			Else {
				Set tname(n) = $LB(title,"","")
			}
		}
		Else {
			Set tname(n) = $LB(title,page_"?KEY="_key,key)
		}
		
		If (cls [ "reference") {
			Do ..GetRefEntries(compid, .tname, page, n)
		}
		ElseIf (cls [ "part") {
			// recursively get sub-components
			Do ..GetComponents(compid, .subtname, page)
			Merge tname(n) = subtname
		}
		Else {
			Do ..GetSect1(compid, .tname, page, n)
		}
		
		Set n = n + 1

		&sql(FETCH CompCursor)
	}
	&sql(CLOSE CompCursor)
#EXECUTE Kill %msqlvar

	Quit
]]></Implementation>
</Method>

<Method name="GetSect1">
<Description>
get the level 1 sections for the given chapter</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[chid:id,&tname:cdata,page:cdata,number:dbint]]></FormalSpec>
<Implementation><![CDATA[
	// list all of the sect1 blocks
	&sql(DECLARE S1Cursor CURSOR FOR
		SELECT ID,blockid, title, component->blockid
		INTO :sid,:key, :title, :chap
		FROM sect1
		WHERE container = :chid
	)

	&sql(OPEN S1Cursor)
	&sql(FETCH S1Cursor)
	Set n = 1
	While (SQLCODE = 0) {
		// error detection
		Set:title="" title = key _ " (untitled)"

		Set tname(number,n) = $LB(title,page_"?KEY="_chap_"#"_key,key)

		&sql(FETCH S1Cursor)
		Set n = n + 1
	}
 
	&sql(CLOSE S1Cursor)
]]></Implementation>
</Method>

<Method name="ShowSect2">
<Description>
display the level 2 sections for the given chapter</Description>
<Internal>1</Internal>
<FormalSpec>id:id,label:cdata</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[

	Set num = 1

	// list all of the sect2 blocks
	&sql(DECLARE S2Cursor CURSOR FOR
		SELECT ID,blockid, title, component->blockid
		INTO :sid,:key, :title, :chap
		FROM sect2
		WHERE container = :id
	)

	&sql(OPEN S2Cursor)
	&sql(FETCH S2Cursor)

	Write "<MENU>",!

	While (SQLCODE = 0) {
		&html<<LI><A CLASS="TOCSect2" HREF='DocBook.UI.Page.cls?KEY=#($ZCVT(chap,"O","URL"))##("#"_key)#'>#(label _ "." _ num)# #(title)#</A></LI>>
		&sql(FETCH S2Cursor)
		Set num = num + 1
	}

	Write "</MENU>",!

	&sql(CLOSE S2Cursor)
]]></Implementation>
</Method>

<Method name="GetRefEntries">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[id:id,&tname:cdata,page:cdata,number:dbint]]></FormalSpec>
<Implementation><![CDATA[
	&sql(DECLARE RECursor CURSOR FOR
		SELECT blockid, refmeta_refentrytitle
		INTO :key, :title
		FROM refentry
		WHERE container = :id
		ORDER BY refmeta_refentrytitle
	)

	&sql(OPEN RECursor)
	&sql(FETCH RECursor)
	Set n = 1

	While (SQLCODE = 0) {
		// error detection
		Set:title="" title = key _ " (untitled)"

		Set tname(number,n) = $LB(title,page_"?KEY="_key,key)
		Set n = n + 1

		&sql(FETCH RECursor)
	}

	&sql(CLOSE RECursor)
]]></Implementation>
</Method>

<Method name="GetSets">
<Description>
Get list of sets</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&tname:cdata,page:cdata]]></FormalSpec>
<Implementation><![CDATA[
	Set n = 0
	
	Set setid = $O(^DocBook.blockI("setIdx",""))
	While (setid '="") {
		Set set = ##class(DocBook.set).%OpenId(setid)
		If (set '="") {
			Set n = n + 1
			Set tname(n) = $LB(set.title, "", "", "", setid)
		}
		
		Do ..GetBooks(setid,n,.tname,page)

		Set setid = $O(^DocBook.blockI("setIdx",setid))
	}

	Set n = n + 1
	Set tname(n) = $LB($$$T("Technical Articles"),page_"?KEY=KNBASE","KNBASE")
]]></Implementation>
</Method>

<Method name="GetKNBase">
<Description>
Get list of articles in KNBASE</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&tname:cdata,page:cdata]]></FormalSpec>
<Implementation><![CDATA[
	Set n = 0
	
	// loop over articles
	&sql(DECLARE TCursor CURSOR FOR
		SELECT blockid,title
		INTO :key,:title
		FROM DocBook.article
		ORDER BY title
	)
	
	&sql(OPEN TCursor)
	&sql(FETCH TCursor)

	While (SQLCODE = 0) {
		// error detection
		Set:title="" title = key _ " (untitled)"

		Set n = n + 1
		Set tname(n) = $LB(title,page _ "?KEY=" _ key)

		&sql(FETCH TCursor)
	}
	&sql(CLOSE TCursor)
]]></Implementation>
</Method>

<Method name="GetBooks">
<Description>
Get list of books for the given set</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[setid:id,number:dbint,&tname:cdata,page:cdata]]></FormalSpec>
<Implementation><![CDATA[
	// loop over books
	&sql(DECLARE BookCursor CURSOR FOR
		SELECT ID,blockid,title,subtitle,dbrole
		INTO :id,:bookKey,:title,:desc, :role
		FROM DocBook.book
		WHERE container = :setid
	)

	Set n = 0
	
	&sql(OPEN BookCursor)
	&sql(FETCH BookCursor)

	While (SQLCODE = 0) {
		// error detection
		Set:title="" title = key _ " (untitled)"

		Set n = n + 1
		Set tname(number,n) = $LB(title,page_"?KEY="_bookKey,bookKey)
		&sql(FETCH BookCursor)
	}
	&sql(CLOSE BookCursor)
]]></Implementation>
</Method>
</Class>
</Export>
