<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<CSP name="doctypes/axdocbook/axdocbook-html.xsl" application="/csp/docbook/" default="1"><![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<!--Copyright Arbortext, Inc., 1999-2002-->
<!DOCTYPE xsl:stylesheet>

<?APT StylesheetID Title="DocBook XSL-HTML" CompositionTypes="htmlfile,pda,xsl"?>

<xsl:stylesheet
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
  version="1.0">

<!-- ================================================================ 

     This file is the root file for the axdocbook doctype's XSL HTML
     stylesheet.  It provides a customization layer on top of the
     official DocBook XSL HTML stylesheets distributed by the OASIS
     DocBook Technical Committee.

     ================================================================ -->

<xsl:import href="../xdocbook/xsl/html/docbook.xsl"/>

<!-- ================================================================ -->
<!--                                                                  -->
<!-- Import a library file that defines processing for Epic PIs.      -->
<!--                                                                  -->
<!-- ================================================================ -->

<xsl:import href="../../lib/xsl/html/pi.xsl"/>
<xsl:param name="Use-atievent-elements" select="''"/>

<!-- Provide some defaults for some variables used by the previously  -->
<!-- imported stylesheet that handles Epic processing instructions.   -->

<xsl:param name="fg2bg_colorizer">
  <xsl:text> bgreen=#c0ffc0; gray3=#d0d0d0; green=#c0ffc0;</xsl:text>
  <xsl:text> lime=#e0ffe0; bviolet=#ffc0ff; gray4=#c0c0c0;</xsl:text>
  <xsl:text> maroon=#c08080; navy=#a0a0c0; bred=#ffc0cb;</xsl:text>
  <xsl:text> borange=#ffc097; gray5=#b0b0b0; olive=#cccc00;</xsl:text>
  <xsl:text> red=#ffc0cb; byellow=#ffffc0; bwhite=#ffffff;</xsl:text>
  <xsl:text> bbrown=#deb887; bblack=#808080; black=#808080;</xsl:text>
  <xsl:text> brown=#deb887; teal=#00e0e0; violet=#ffc0ff;</xsl:text>
  <xsl:text> white=#ffffff; bblue=#c0c0ff; blue=#c0c0ff;</xsl:text>
  <xsl:text> orange=#ffc097; aqua=#d0ffff; gray1=#f0f0f0;</xsl:text>
  <xsl:text> bgray=#d0d0d0; gray2=#e0e0e0; gray=#d0d0d0; yellow=#ffffc0;</xsl:text>
</xsl:param>

<xsl:param name="fg_colorizer">
  <xsl:text> lime=#00ff00; green=#008000; gray3=#c0c0c0;</xsl:text>
  <xsl:text> navy=#000080; maroon=#800000; gray4=#b0b0b0;</xsl:text>
  <xsl:text> red=#ff0000; olive=#808000; gray5=#808080;</xsl:text>
  <xsl:text> white=#ffffff; violet=#ff00ff; teal=#008080;</xsl:text>
  <xsl:text> brown=#804000; black=#000000; orange=#ff8000;</xsl:text>
  <xsl:text> blue=#0000ff; gray1=#e0e0e0; aqua=#00ffff;</xsl:text>
  <xsl:text> yellow=#ffff00; gray=#c0c0c0; gray2=#d0d0d0;</xsl:text>
</xsl:param>

<!-- ================================================================ -->
<!--                                                                  -->
<!-- xsl:output must come after the xsl:import's                      -->
<!--                                                                  -->
<!-- ================================================================ -->

<xsl:output method="html"/>

<!-- ================================================================ -->
<!--                                                                  -->
<!-- Include a library file that defines some version info variables. -->
<!--                                                                  -->
<!-- ================================================================ -->

<xsl:include href="../../lib/xsl/common/version.xsl"/>

<!-- ================================================================ -->
<!--                                                                  -->
<!-- Make sure PI's controlling output escaping are passed through    -->
<!--                                                                  -->
<!-- ================================================================ -->

<xsl:template match="processing-instruction('javax.xml.transform.disable-output-escaping')">
    <xsl:copy-of select="."/>
</xsl:template>

<xsl:template match="processing-instruction('javax.xml.transform.enable-output-escaping')">
    <xsl:copy-of select="."/>
</xsl:template>

<!-- ================================================================ -->
<!-- ================================================================ -->
<!--                                                                  -->
<!-- Here we include overriding templates that update those in        -->
<!-- the distributed stylesheets.                                     -->
<!--                                                                  -->
<!-- ================================================================ -->
<!-- ================================================================ -->

<xsl:include href="xsl/html/axdocbook-updates.xsl"/>

<!-- ================================================================ -->
<!--                                                                  -->
<!-- Add calls within td|th to handle _cellfont.                      -->
<!--                                                                  -->
<!-- ================================================================ -->

<xsl:template match="entry" name="entry">
  <xsl:param name="col" select="1"/>
  <xsl:param name="spans"/>

  <xsl:variable name="cellgi">
    <xsl:choose>
      <xsl:when test="ancestor::thead">th</xsl:when>
      <xsl:when test="ancestor::tfoot">th</xsl:when>
      <xsl:otherwise>td</xsl:otherwise>
    </xsl:choose>
  </xsl:variable>

  <xsl:variable name="empty.cell" select="count(node()) = 0"/>

  <xsl:variable name="named.colnum">
    <xsl:call-template name="entry.colnum"/>
  </xsl:variable>

  <xsl:variable name="entry.colnum">
    <xsl:choose>
      <xsl:when test="$named.colnum &gt; 0">
        <xsl:value-of select="$named.colnum"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$col"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:variable>

  <xsl:variable name="entry.colspan">
    <xsl:choose>
      <xsl:when test="@spanname or @namest">
        <xsl:call-template name="calculate.colspan"/>
      </xsl:when>
      <xsl:otherwise>1</xsl:otherwise>
    </xsl:choose>
  </xsl:variable>

  <xsl:variable name="following.spans">
    <xsl:call-template name="calculate.following.spans">
      <xsl:with-param name="colspan" select="$entry.colspan"/>
      <xsl:with-param name="spans" select="$spans"/>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="rowsep">
    <xsl:call-template name="inherited.table.attribute">
      <xsl:with-param name="entry" select="."/>
      <xsl:with-param name="colnum" select="$entry.colnum"/>
      <xsl:with-param name="attribute" select="'rowsep'"/>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="colsep">
    <xsl:call-template name="inherited.table.attribute">
      <xsl:with-param name="entry" select="."/>
      <xsl:with-param name="colnum" select="$entry.colnum"/>
      <xsl:with-param name="attribute" select="'colsep'"/>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="valign">
    <xsl:call-template name="inherited.table.attribute">
      <xsl:with-param name="entry" select="."/>
      <xsl:with-param name="colnum" select="$entry.colnum"/>
      <xsl:with-param name="attribute" select="'valign'"/>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="align">
    <xsl:call-template name="inherited.table.attribute">
      <xsl:with-param name="entry" select="."/>
      <xsl:with-param name="colnum" select="$entry.colnum"/>
      <xsl:with-param name="attribute" select="'align'"/>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="char">
    <xsl:call-template name="inherited.table.attribute">
      <xsl:with-param name="entry" select="."/>
      <xsl:with-param name="colnum" select="$entry.colnum"/>
      <xsl:with-param name="attribute" select="'char'"/>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="charoff">
    <xsl:call-template name="inherited.table.attribute">
      <xsl:with-param name="entry" select="."/>
      <xsl:with-param name="colnum" select="$entry.colnum"/>
      <xsl:with-param name="attribute" select="'charoff'"/>
    </xsl:call-template>
  </xsl:variable>

  <xsl:choose>
    <xsl:when test="$spans != '' and not(starts-with($spans,'0:'))">
      <xsl:call-template name="entry">
        <xsl:with-param name="col" select="$col+1"/>
        <xsl:with-param name="spans" select="substring-after($spans,':')"/>
      </xsl:call-template>
    </xsl:when>

    <xsl:when test="$entry.colnum &gt; $col">
      <xsl:call-template name="empty.table.cell"/>
      <xsl:call-template name="entry">
        <xsl:with-param name="col" select="$col+1"/>
        <xsl:with-param name="spans" select="substring-after($spans,':')"/>
      </xsl:call-template>
    </xsl:when>

    <xsl:otherwise>
      <xsl:element name="{$cellgi}">
        <xsl:if test="$show.revisionflag and @revisionflag">
          <xsl:attribute name="class">
            <xsl:value-of select="@revisionflag"/>
          </xsl:attribute>
        </xsl:if>

        <xsl:if test="$table.borders.with.css != 0">
          <xsl:attribute name="style">
            <xsl:if test="$colsep &gt; 0">
              <xsl:call-template name="border">
                <xsl:with-param name="side" select="'right'"/>
              </xsl:call-template>
            </xsl:if>
            <xsl:if test="$rowsep &gt; 0">
              <xsl:call-template name="border">
                <xsl:with-param name="side" select="'bottom'"/>
              </xsl:call-template>
            </xsl:if>
          </xsl:attribute>
        </xsl:if>

        <xsl:if test="@morerows &gt; 0">
          <xsl:attribute name="rowspan">
            <xsl:value-of select="1+@morerows"/>
          </xsl:attribute>
        </xsl:if>

        <xsl:if test="$entry.colspan &gt; 1">
          <xsl:attribute name="colspan">
            <xsl:value-of select="$entry.colspan"/>
          </xsl:attribute>
        </xsl:if>

        <xsl:if test="$align != ''">
          <xsl:attribute name="align">
            <xsl:value-of select="$align"/>
          </xsl:attribute>
        </xsl:if>

        <xsl:if test="$valign != ''">
          <xsl:attribute name="valign">
            <xsl:value-of select="$valign"/>
          </xsl:attribute>
        </xsl:if>

        <xsl:if test="$char != ''">
          <xsl:attribute name="char">
            <xsl:value-of select="$char"/>
          </xsl:attribute>
        </xsl:if>

        <xsl:if test="$charoff != ''">
          <xsl:attribute name="charoff">
            <xsl:value-of select="$charoff"/>
          </xsl:attribute>
        </xsl:if>

        <xsl:if test="not(preceding-sibling::*) and ancestor::row/@id">
          <xsl:call-template name="anchor">
            <xsl:with-param name="node" select="ancestor::row[1]"/>
          </xsl:call-template>
        </xsl:if>

        <xsl:call-template name="anchor"/>

        <!-- ***** first added call to handle _cellfont ***** -->
	<xsl:call-template name="just-after-table-cell-stag"/>
        <!-- ***** end added line ***** -->

        <xsl:choose>
          <xsl:when test="$empty.cell">
            <xsl:text>&#160;</xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:apply-templates/>
          </xsl:otherwise>
        </xsl:choose>

        <!-- ***** second added call to handle _cellfont ***** -->
	<xsl:call-template name="just-before-table-cell-etag"/>
        <!-- ***** end added line ***** -->

      </xsl:element>

      <xsl:choose>
        <xsl:when test="following-sibling::entry">
          <xsl:apply-templates select="following-sibling::entry[1]">
            <xsl:with-param name="col" select="$col+$entry.colspan"/>
            <xsl:with-param name="spans" select="$following.spans"/>
          </xsl:apply-templates>
        </xsl:when>
        <xsl:otherwise>
          <xsl:call-template name="finaltd">
            <xsl:with-param name="spans" select="$following.spans"/>
            <xsl:with-param name="col" select="$col+$entry.colspan"/>
          </xsl:call-template>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<!-- ================================================================ -->
<!--                                                                  -->
<!-- redefine the "interface" template to make the contents smaller   -->
<!-- sans-serif bold                                                  -->
<!--                                                                  -->
<!-- ================================================================ -->

<xsl:template match="interface">
  <span style="font-family: sans-serif; font-weight: bold; font-size: 0.75em">
    <xsl:call-template name="inline.charseq"/>
  </span>
</xsl:template>

<!-- ================================================================ -->
<!--                                                                  -->
<!-- Set use.extensions=1 so that we take advantage of extensions,    -->
<!-- but only do this if the appropriate extension functions are      -->
<!-- really available for the current XSLT processor.                 -->
<!--                                                                  -->
<!-- ================================================================ -->

<xsl:param name="use.extensions" 
	xmlns:stbl="http://nwalsh.com/xslt/ext/com.nwalsh.saxon.Table"
	xmlns:xtbl="com.nwalsh.xalan.Table">
  <xsl:choose>
    <xsl:when test="function-available('stbl:convertLength')">1</xsl:when>
    <xsl:when test="function-available('xtbl:convertLength')">1</xsl:when>
    <xsl:otherwise>0</xsl:otherwise>
  </xsl:choose>
</xsl:param>

<!-- ================================================================ -->
<!--                                                                  -->
<!-- Here down, we take advantage of various variables in             -->
<!-- the DocBook stylesheet code to make customizations.              -->
<!--                                                                  -->
<!-- ================================================================ -->

<!-- Set toc generation parameter -->
<xsl:param name="generate.toc">
set       toc
book      toc,figure,table,example,equation
/preface  toc
/chapter  toc
/appendix toc
/article  toc
/section  toc
/part     toc,figure,example,table,equation
/reference toc,figure,example,table,equation
</xsl:param>

<!-- only put up to 2 levels of sections into toc -->
<xsl:param name="toc.section.depth" select="2"/>

<!-- turn off index generation for HTML output -->
<xsl:param name="generate.index" select="0"/>

<!-- Redefine user.head.content to emit some customized effects:
     1.  emit a meta tag insert epic application information.
     2.  emit some style info:
         a.  make all titles blue
         b.  handles "extra" emphasis role values (values of bold as well
             as an omitted role are already handled in the emphasis template)
-->
<xsl:template name="user.head.content">
  <xsl:param name="node" select="."/>
  <meta name="generator" content="{$generator-product-name} {$generator-version-no}"/>
  <style type="text/css">h1, h2, h3, h4, h5 {color: blue}</style>
  <style type="text/css">
    span.italic {font-style: italic}
    span.strong {font-weight: bold}
    span.underline {text-decoration: underline}
    span.strikethrough {text-decoration: line-through}
    span.blue {color: blue}
    span.red {color: red}
  </style>
</xsl:template>

<!-- set up for sections to be auto numbered and include chapter number -->
<xsl:param name="section.autolabel" select="1"/>
<xsl:param name="section.label.includes.component.label" select="1"/>

<!-- Avoid use of graphic callouts or Unicode characters, use (#) instead -->
<xsl:param name="callout.graphics" select="0"/>
<xsl:param name="callout.unicode" select="0"/>

</xsl:stylesheet>
]]></CSP>
</Export>
