<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="DocBook.Manager.DrupalNodesPage">
<Super>%ZEN.Component.page,DocBook.Manager.ZenMethods</Super>
<TimeCreated>63854,62786.807671</TimeCreated>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">
/* default body style */
body {
    font-family: arial;
}

.tabGroupBody {
    height: 600px;
    width: 1000px;
}

.paneHint {
    font-style: italic;
}

.basicTitle {
    font-weight: bold;
}

.alert {
    background: red;
    font-weight: bold;
}

.message {
    background: red;
    padding: 5px;
}

.progressMessage {
    background: red;
    padding: 5px;
}

.doneMessage {
    background: yellow;
    padding: 5px;
}

.basictext {
    padding: 5px;
}

.tinypad {
    padding: 4.5px;
}

.basicheading {
    font-size: 16px;
    font-weight: bold;
}
.basiclabel {
    font-weight: bold;
}

.smallpad {
    padding: 10px;
}

.basicpad {
    padding-left: 15px;
    padding-right: 15px;
}

.title {
    font-weight: bold;
    font-size: 24px;
    padding: 5px;
}

.label {
    font-weight: bold;
}

.hintclass {
    font-style: italic;
}

.edit {
    background: yellow;
    border: 2px solid red;    
    padding: 5px;
}

.initializing {
    background: yellow;
    border: 2px solid red;    
    font-size: 24px;
    padding: 5px;
}

.leftbutton {
    display: block;
    width: 160px;
}


.buttongroup {
    padding: 10px;
}

.title { 
    font-weight: bold;
    text-align: left;
    padding: 2px;
}

/* @doc="Main table for tablePane" */
table.tpTable {
    background: white;
    border: 1px solid white;
    font-family: arial;
    width: 100%;
    table-layout: fixed;
    empty-cells: show;
}

/* @doc="Caption above table."*/
table.tpTable caption { 
    font-weight: bold;
    text-align: left;
    padding: 2px;
    border: 1px solid white;
    background: #404040;
    background-image: url(images/grad-gray-10x100.png);
    background-repeat: repeat-x;
}

/* @doc="Column header." */
table.tpTable th {
    border-right: 1px solid white;
    border-bottom: 1px solid white;
    color: black;
    font-weight: bold;
    text-align: left;
    padding: 2px;
    overflow: hidden;
    background: #404040;
    background-image: url(images/grad-gray-10x100.png);
    background-repeat: repeat-x;
}

/* @doc="Selected column header." */
table.tpTable th.tpHdrSelected {
    color: white;
    background: #F0F0F0;
    background-image: url(images/grad-gray2-10x100.png);
    background-repeat: repeat-x;
}

table.tpTable td {
    border-right: 1px solid white;
    border-bottom: 1px solid white;
    padding: 2px;
    overflow: hidden;
    /*text-overflow: ellipsis;*/
}

table.tpTable tr.tpSelected td {
    border-top: 1px solid white;
    border-bottom: 2px solid white;
    padding-top: 1px;
    padding-bottom: 1px;
}

/* @doc="Selected row within table." */
table.tpTable tr.tpSelected {
    color: black;
    background: #404040;
    background-image: url(images/grad-yellow-10x100.png);
    background-repeat: repeat-x;
}

/* @doc="Style used for table body outside of cells within the table." */
.tpBody {
    background: #DDDDDD;
}

/* @doc="Style used for table body outside of cells within the table when using fixed headers." */
.tpBodyFixed {
    background: #DDDDDD;
    overflow-x:hidden;
    overflow-y:auto;
}
 
/* @doc="Style for rows when not using zebra styling." */
.tpRow {
    color: darkblue;
    background: white;
}

/* @doc="Style for odd-rows when using zebra styling." */
.tpOdd {
    color: darkblue;
    background: white;
}

/* @doc="Style for even-rows when using zebra styling." */
.tpEven {
    color: darkblue;
    background: AliceBlue;
}

/* @doc="Cell containing a string value." */
.tpStr {

}

/* @doc="Cell containing numeric value." */
.tpNum {
    text-align: right;
}

/* @doc="Cell containing the current row selector." */
.tpSel {
    text-align: center;
    font-weight: bold;
}

/* @doc="Cell containing the row number." */
.tpRNum {
    text-align: right;
}

/* @doc="Cell containing a link." */
.tpAction {
}

.tpAction a {    
    color: darkblue;
}

.tpAction a:hover {
    color: darkblue;
}

.tpAction a:link {
    color: darkblue;
}

.tpAction a:active {
    color: darkblue;
}

/* @doc="Cell displaying No Results message." */
table td.tpNoResults {
    font-style: italic;
    color: #202060;
    background: white;
}

/* @doc="Extra padding cell at bottom of table." */
table td.tpPadRow {
    background: white;
}

/* @doc="Table containing filter controls." */
table.tpFilterLayout {
    border: none;
}

/* @doc="Cell within table containing filter controls." */
table.tpFilterLayout td {
    border: none;
    background: none;
}

/* @doc="Filter control." */
.tpFilter {
    /*width: 100%;*/
    font-size: 0.8em;
}

/* @doc="Filter control for date values." */
.tpFilterDate {
    font-size: 0.8em;
}

/* @doc="Filter control with focus." */
.tpFilter:focus {
    background: #FFFFE0;
}

/* @doc="Label for filter control." */
.tpFilterLabel {
    font-size: 0.6em;
    font-weight: normal;
    text-align: right;
}

/* @doc="Button in filter section." */
.tpFilterButton {
    vertical-align: middle;
    border: 1px solid black;
    font-size: 0.6em;
}

.tpFilterButton:hover {
    background: #FFFF80;
}


col { 
    background: linen;
}

#PageLabelXXX {
    font-size: 0.9em;
    font-weight: bold;
}

thXXX {
    font-family: courier;
}

tdXXX {
    font-family: courier;
}


</style>
]]></Data>
</XData>

<XData name="Contents">
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" title="Nodes in the DocBook Database" >
<link href="DocBook.Manager.Home.cls" caption="&lt;&lt;&lt; Back to the DocBook Manager"/>
<spacer height="5"/>
<label value="Drupal Nodes" controlClass="label"/>
<label value="This table lists Drupal nodes that will be generated from this DOCBOOK database, as found by an initial scan." />
<label value="After you load files, use the button below to redo the scan." />
<spacer height="15"/>

<hgroup>
<button caption="Rebuild &amp; Reclassify Nodes" 
       onclick="zenPage.Rescan('drupalnodes');" 
       hint="Background task; can take many minutes"
        enclosingClass="basictext" valign="top"/>
<spacer width="25"/>
<button caption="Reclassify Nodes" 
       onclick="zenPage.Rescan('drupalnodesclassify');" 
       hint="Background task"
        enclosingClass="basictext" valign="top"/>
</hgroup>

<vgroup valign="top" enclosingClass="basictext">
<tableNavigator tablePaneId="tagviewTable"  align="left" />
<tablePane id="tagviewTable" OnCreateResultSet="CreateTagViewRS"
headerLayout="headersOnTop"
showRowNumbers="true"
showZebra="true"
useKeys="true"
pageSize="10"
maxRows="100000"
autoExecute="true"
useSnapshot="true"
nowrap="false"
showRowSelector="false"
enclosingStyle="font-size:9pt;"
showQuery="true">
<column colName="blockid" filterType="text" link="DocBook.UI.Page.cls?KEY=#(%query.blockid)#" width="200"/>
<column colName="blockgranularity" header="block granularity"  filterType="text" width="75" hidden="true"/>
<column colName="blocktype" filterType="text" width="75"/>
<column colName="detaillevel" header="detail level"  filterType="text" width="50"/>
<column colName="product" filterType="query" width="75"
filterQuery="select distinct %EXACT(product) from DocBook_ManagerTables.DrupalNodes order by product"/>
<column colName="rank" filterType="text" width="40"/>
<column colName="keywords" filterType="text" cellTitle="Use * to mean 'any non-null value'" />
<column colName="derivedkeywords" header="derived keywords"  filterType="text" cellTitle="Use * to mean 'any non-null value'"/>
<column colName="title" filterType="text" width="125"/>
<column colName="content" filterType="text" width="250"/>
<column colName="usecases" filterType="query" width="100"
filterQuery="select distinct %EXACT(usecases) from DocBook_ManagerTables.DrupalNodes order by USECASES"/>
</tablePane>
</vgroup>
</page>
]]></Data>
</XData>

<Method name="CreateTagViewRS">
<FormalSpec>*status:%Status,pInfo:%ZEN.Auxiliary.QueryInfo</FormalSpec>
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[
   
    set status = $$$OK
    set sql = "SELECT blockid, blocktype,title, $EXTRACT(NVL(content,''),1,100)||'...' as content, detaillevel, rank, "
             _ "product, keywords, derivedkeywords, usecases FROM DocBook_ManagerTables.DrupalNodes"

    set tWHERE = ""
    set filtered=0
    
    if ($GET(pInfo.filters("blockid"))'="") {
        set filtered=1
        set tWHERE = tWHERE _ $SELECT(tWHERE="":"",1:" AND ") _
                "%SQLUPPER(blockid) [ '" _ $$$UPPER(pInfo.filters("blockid")) _ "'"
    }

    if ($GET(pInfo.filters("blocktype"))'="") {
        set filtered=1
        set tWHERE = tWHERE _ $SELECT(tWHERE="":"",1:" AND ") _
                "blocktype %STARTSWITH '" _ $$$UPPER(pInfo.filters("blocktype")) _ "'"
    }

    if ($GET(pInfo.filters("detaillevel"))'="") {
        set filtered=1
        set tWHERE = tWHERE _ $SELECT(tWHERE="":"",1:" AND ") _
                "detaillevel = '" _ pInfo.filters("detaillevel") _ "'"
    }

    if ($GET(pInfo.filters("product"))'="") {
        set filtered=1
        set tWHERE = tWHERE _ $SELECT(tWHERE="":"",1:" AND ") _
                "product %STARTSWITH '" _ pInfo.filters("product") _ "'"
    }

    if ($GET(pInfo.filters("rank"))'="") {
        set filtered=1
        set tWHERE = tWHERE _ $SELECT(tWHERE="":"",1:" AND ") _
                "rank <= '" _ pInfo.filters("rank") _ "'"
    }

    if ($GET(pInfo.filters("keywords"))'="") {
        set filtered=1
        set firstone=$E(pInfo.filters("keywords"),1,1)
        if (firstone="*") {
            set tWHERE = tWHERE _ $SELECT(tWHERE="":"",1:" AND ") _
            "keywords is not null"
        } elseif (firstone="-") {
            set tWHERE = tWHERE _ $SELECT(tWHERE="":"",1:" AND ") _
            "keywords != '" _ rest _ "'"
        } else {
            set list=$LISTFROMSTRING($$$UPPER(pInfo.filters("keywords"))," ")
            for i=1:1:$LL(list) {
                set tWHERE = tWHERE _ $SELECT(tWHERE="":"",1:" AND ") _
                "%SQLUPPER(keywords) [ '" _ $LI(list,i) _ "'"
            }
        }
    }

    if ($GET(pInfo.filters("derivedkeywords"))'="") {
        set filtered=1
        set firstone=$E(pInfo.filters("derivedkeywords"),1,1)
        if (firstone="*") {
            set tWHERE = tWHERE _ $SELECT(tWHERE="":"",1:" AND ") _
            "derivedkeywords is not null"
        } elseif (firstone="-") {
            set tWHERE = tWHERE _ $SELECT(tWHERE="":"",1:" AND ") _
            "derivedkeywords != '" _ rest _ "'"
        } else {
            set list=$LISTFROMSTRING($$$UPPER(pInfo.filters("derivedkeywords"))," ")
            for i=1:1:$LL(list) {
                set tWHERE = tWHERE _ $SELECT(tWHERE="":"",1:" AND ") _
                "%SQLUPPER(derivedkeywords) [ '" _ $LI(list,i) _ "'"
            }
        }
    }

    if ($GET(pInfo.filters("title"))'="") {
        set filtered=1
        set list=$LISTFROMSTRING($$$UPPER(pInfo.filters("title"))," ")
        for i=1:1:$LL(list) {
            set tWHERE = tWHERE _ $SELECT(tWHERE="":"",1:" AND ") _
                    "%SQLUPPER(title) [ '" _ $LI(list,i) _ "'"
        }
    }

    if ($GET(pInfo.filters("content"))'="") {
        set filtered=1
        set list=$LISTFROMSTRING($$$UPPER(pInfo.filters("content"))," ")
        for i=1:1:$LL(list) {
            set tWHERE = tWHERE _ $SELECT(tWHERE="":"",1:" AND ") _
                    "%SQLUPPER(content) [ '" _ $LI(list,i) _ "'"
        }
    }

    if ($GET(pInfo.filters("usecases"))'="") {
        set filtered=1
        set firstone=$E(pInfo.filters("usecases"),1,1)
        set rest=$E(pInfo.filters("usecases"),2,*)
        if (firstone="*") {
            set tWHERE = tWHERE _ $SELECT(tWHERE="":"",1:" AND ") _
                    "usecases is not null"
        } elseif (firstone="-") {
            set tWHERE = tWHERE _ $SELECT(tWHERE="":"",1:" AND ") _
                    "usecases != '" _ rest _ "'"
        } else {
            set tWHERE = tWHERE _ $SELECT(tWHERE="":"",1:" AND ") _
                    "usecases = '" _ pInfo.filters("usecases") _ "'"
        }
    }

    if filtered {
        set sql = sql _ " WHERE " _tWHERE
    }
    
    set sql=sql_" ORDER BY detaillevel,rank"
    //set sql=sql_" ORDER BY rank"
    //set sql=sql_" ORDER BY blockgranularity"
        
    set rset = ##class(%ResultSet).%New()
    set status = rset.Prepare(sql)
    set pInfo.queryText = sql
    quit rset
]]></Implementation>
</Method>

<Method name="GetList">
<ClassMethod>1</ClassMethod>
<FormalSpec>argument:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set UPPER=$$$UPPER(argument)
    set list=$LISTFROMSTRING(UPPER," ")
    set return=""
    for i=1:1:$LISTLENGTH(list) {
        if i=1 {
            set return = "'"_$LI(list,i)_"'"
        } else {
            set return = return _ ",'"_$LI(list,i)_"'"
        }
    }
    quit "("_return_")"
]]></Implementation>
</Method>
</Class>
</Export>
