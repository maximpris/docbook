<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="DocBook.UI.SearchPageZen">
<Description>
A Zen-based search page for DocBook that uses SQL text searching.</Description>
<IncludeCode>DocBookMac</IncludeCode>
<Super>%ZEN.Component.page</Super>
<TimeCreated>60803,66923.814445</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Docbook Search</Default>
</Parameter>

<Parameter name="CSSINCLUDES">
<Default>docbookhtml.css,DocBook_SearchPage.css</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>DOCBOOK</Default>
</Parameter>

<Property name="KeyWord">
<Description>
Initial search string.</Description>
<Type>%String</Type>
<Parameter name="ZENURL" value="KeyWord"/>
</Property>

<Property name="BookId">
<Description>
Book Id for limited search</Description>
<Type>%String</Type>
<Parameter name="ZENURL" value="Book"/>
</Property>

<Property name="SearchKey">
<Description>
Search key made up of book:KeyWord</Description>
<Type>%String</Type>
<Calculated>1</Calculated>
</Property>

<Property name="Num">
<Description>
Ordinal position of first result to display.</Description>
<Type>%Integer</Type>
<Parameter name="ZENURL" value="Num"/>
</Property>

<Property name="msgSearching">
<Description>
Localized searching message.</Description>
<Type>%ZEN.Datatype.caption</Type>
<InitialExpression>"Searching..."</InitialExpression>
</Property>

<Method name="SearchKeyGet">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[   Quit i%BookId_":"_..EscapeHTML(i%KeyWord)
]]></Implementation>
</Method>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">

.ZResult,.ZResultIndex {
    border-bottom: 2px solid gray;
    font-family: arial;
    margin-left: 60px;
    margin-right: 60px;
    padding-top: 5px;
    padding-bottom: 15px;
}

.ZResultIndex {
    background:#FFFFD0;
}

.ZResult a,.ZResultIndex a {
    color: blue;
}

/* sample text for result */
.ZResult .sample, .ZResultIndex .sample {
    color: black;
    padding-left: 10px;
    padding-top: 5px;
    padding-bottom: 5px;
    max-height: 10.0em;
    overflow: auto;
}

.ZResult .sample {
    border-bottom: 1px dashed lightgray;
}

.ZResult .sample a,.ZResultIndex .sample a {
    color: darkgreen;
}

.ZResult .subhead,.ZResultIndex .subhead {
    padding-top: 3px;
    padding-bottom: 3px;
}

.ZResult .rank {
    font-size: 0.6em;
}

.ZDebugText {
    font-family: arial;
    font-size: 10pt;
    font-weight: bold;
    color: black;
    background: white;
    border: 1px solid gray;
    width: 100%;
}


.ZDebugTable {
    background: #F0F0F0;
    border: 1px solid gray;
    width: 100%;
}

.ZDebugTable td {
    padding-left: 5px;
    padding-right: 5px;
    border-right: 1px solid black;
    border-bottom: 1px solid black;
}

.zTiming {
    font-family: arial;
    font-size: 10pt;
    background: #489CCC;
    text-align: right;
    width: 100%;
    margin-bottom: 5px;
    border-top: 1px solid #202060;
    border-bottom: 1px solid #8080FF;
}

.zTiming a {
    color: black;
    text-decoration: none;
}

.ElLabel {
    font-size: 0.9em;
    font-style: italic;
    color: #202020;
}

.ZMsg {
    font-family: arial;
    padding-left: 40px;
}

.ZRecent {
    font-family: arial;
    padding-left: 40px;
}

.ZCount {
    font-size: 0.9em;
    font-style: italic;
    color: #202020;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" title="DocBook Search Page">
<html id="title" OnDrawContent="DrawTitle"/>
<vgroup width="100%" cellVAlign="top">
<form id="searchForm" layout="horizontal" labelPosition="left" cellVAlign="middle">
<spacer width="20px"/>
<html><div  style="font-size:222%;padding-right:10px;"><span style="color:blue;">D</span><span style="color:red;">o</span><span style="color:green;">c</span><span style="color:purple;">B</span><span style="color:blue;">o</span><span style="color:red;">o</span><span style="color:green;">k</span></div></html>
<html><a id="bookBack" data-ajax-ignored="" HREF="DocBook.UI.FramePage.cls" class='backButton'>Back</a></html>
<text size="40" id="search" name="KeyWord" value="#(%page.KeyWord)#" placeholder="search"
onkeydown="return zenPage.keyHandler(zenEvent);"/>
<html><a class="reset-search" data-ajax-ignored="" HREF="#" onclick="$('#search input').val('').focus(); return false;">Reset</a></html>
<spacer width="10px"/>
<submit caption="Search" title="Search DocBook for the search word(s)" controlClass="submit-search"/>
<spacer width="10px"/>
<!--<button caption="Reset" title="Reset the search words" onclick="zenPage.resetSearch();"/>-->
<!--<spacer width="10px"/>
<button caption="Search the Web" title="Search the web for the search word(s) using Google" onclick="zenPage.webSearch();"/>-->
</form>
<html id="results" OnDrawContent="DrawResults" seed="#(%page.SearchKey)#" />
</vgroup>
</page>
]]></Data>
</XData>

<Method name="%OnDrawHTMLMeta">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Write "<meta name=""viewport"" content=""width=device-width, initial-scale=1.0,maximum-scale=1.0, user-scalable=no""/>"
  
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnDrawHTMLBody">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&html<
	<SCRIPT type="text/javascript" src="jquery-1.12.1.min.js"></SCRIPT>
	<SCRIPT type="text/javascript">	  		
			var isMobile = false; //initiate as false
			// device detection
			if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent) 
		    	|| /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(navigator.userAgent.substr(0,4))) isMobile = true;
	    		
	   		if(isMobile) {
		   		setTimeout(function () {
			   		$('body').addClass('mobile').removeClass('desktop')
			   	}, 1);
			}
			else {
				setTimeout(function () {
					$('body').removeClass('mobile').addClass('desktop');
				}, 1);
			}			
		</SCRIPT>>
		
		&html<<SCRIPT type="text/javascript">		
		(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function()
{ (i[r].q=i[r].q||[]).push(arguments)}
,i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
ga('create', 'UA-77081839-1', 'auto');
ga('send', 'pageview');
	</SCRIPT>>
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="onloadHandler">
<Internal>1</Internal>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[   zenPage.getComponentById('search').focus();
]]></Implementation>
</Method>

<Method name="keyHandler">
<Description>
key Handler for text box.</Description>
<Internal>1</Internal>
<FormalSpec>evt</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    if (zenENTER == evt.keyCode) {
        zenPage.getComponentById('searchForm').submit();
        return false;
    }
    return true;
]]></Implementation>
</Method>

<Method name="resetSearch">
<Description>
resetSearch</Description>
<Internal>1</Internal>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[   self.document.location = 'DocBook.UI.SearchPageZen.cls'
]]></Implementation>
</Method>

<Method name="clearSearch">
<Description>
clearSearch</Description>
<Internal>1</Internal>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  var search = zenPage.getComponentById('search')
  search.setValue("");
  
  return false;
]]></Implementation>
</Method>

<Method name="webSearch">
<Description>
Search the web.</Description>
<Internal>1</Internal>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    var phrase = zenPage.getComponentById('search').getValue();
    phrase = cspEncodeUTF8(phrase);
    self.document.location = 'http://www.google.com/search?q=' + phrase;
]]></Implementation>
</Method>

<Method name="search">
<Description>
search for the given phrase.</Description>
<Internal>1</Internal>
<FormalSpec>phrase,bookid</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    phrase = cspEncodeUTF8(phrase);
    self.document.location = 'DocBook.UI.SearchPageZen.cls?KeyWord=' + escape(phrase) + ((bookid==null || bookid=='') ? '' : '&Book=' + escape(bookid));
]]></Implementation>
</Method>

<Method name="research">
<Description>
search for the given phrase.</Description>
<Internal>1</Internal>
<FormalSpec>phrase,bookid</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    phrase = cspEncodeUTF8(phrase);
    self.document.location = 'DocBook.UI.SearchPageZen.cls?KeyWord=' + phrase + ((bookid==null || bookid=='') ? '' : '&Book=' + escape(bookid));
]]></Implementation>
</Method>

<Method name="doSearch">
<Description>
doSearch (deprecated)</Description>
<Internal>1</Internal>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    var search = zenPage.getComponentById('search').getValue();
    var html = zenPage.getComponentById('results');
    if (search == html.getProperty('seed')) {
        // force change in value
        search += ' ';
    }
    html.setProperty('content','');
    html.setProperty('seed',search);
    html.setProperty('content','<div class="ZResult">'+zenPage.msgSearching+'</div>');
]]></Implementation>
</Method>

<Method name="escHTML">
<Description>
Escape only HTML characters</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>StrIn:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    Set StrOt = ""
    For i = 1 : 1 : $LENGTH(StrIn) {
        Set c = $EXTRACT(StrIn, i)
        If ((c = "&") || (c = "<") || (c = ">") || (c = "'")) {
            Set c = $ZCVT(c, "O", "HTML")
        }
        Set StrOt = StrOt _ c
    }
    Quit StrOt
]]></Implementation>
</Method>

<Method name="DrawTitle">
<Description>
Draw contents of HTML title component.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pSeed:%ZEN.Datatype.string</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set info = ##class(DocBook.UI.BannerInfo).%New()
    Set info.title = $$$T("Key Word Search")
    Set info.booktitle = $$$T("InterSystems Online Documentation")
        New %noshowframes
        Set %noshowframes = 1
       
   // Do ##class(DocBook.UI.StdPage).RenderBanner(info)   	
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawResults">
<Description><![CDATA[
Draw contents of HTML component with query results.
<var>pSeed</var> is of the form "BookId:phrase"]]></Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pSeed:%ZEN.Datatype.string</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    &html<<a name="top"></a>>
    Set tSC = $$$OK
    Set tMatches = 0
    Set pSeed = $ZSTRIP(pSeed,"<>W")

    #; special case for eacute and ntilde
    Set pSeed = $TR(pSeed,$C(233,241),"en")

    Set tBookId = $P(pSeed,":",1)
    Set tPhrase = $P(pSeed,":",2)

    If (tPhrase = "") {
        #; if no search phrase *and* there is a cache, show recent items
        If ($D(^DocBook.SearchCacheIndex)) {
            Set msgHome = ""
            &html<<table class="ZTiming"><tr><td align="left">&nbsp;<a href="DocBook.UI.FramePage.cls">#(msgHome)#</a></td><td>&nbsp;</td></tr></table>>
            Set msgRecent = $$$TH("Recent searches:")
            &html<<br/><div class="ZMsg"><i>#(msgRecent)#</i></div><br/>>
            Set tSC = ..DrawRecentSearches()
        }
        Quit tSC
    }

    Set tDebug = +$G(^SearchDebug)
    If (tDebug > 1) {
        Do ..ClearCache()
    }
    
    Set tMax = 20   // items displayed per page
    Set tFirstItem = +$G(%request.Data("Num",1),1)

    Write:tDebug "<table class=""ZDebugTable"" border=""0"" cellpadding=""3"" cellspacing=""0"">"
    Set tStart = $ZH

    #; exec search, results will be in ^||results
    Set tSC = ..ExecSearch(pSeed,.tMatches,tDebug)
    If $$$ISERR(tSC) Quit tSC

    Set tSearchTime = $ZH - tStart
    Write:tDebug "</table>"

    Set tIndexedEntries = ..CountIndexedEntries(tPhrase)
    If (tIndexedEntries > 0)
    {
        Set msgTitles = $$$TH("Matches in titles")
        &html<<table class="ZTiming">>
        &html<<tr>>
        &html<<td>#(msgTitles)#: #(tIndexedEntries)#&nbsp;&nbsp;</td>>
        &html<</tr>>
        &html<</table>>
        
        Do ..ShowIndexedEntries(tPhrase)
    }

    Set msgResults = $$$TH("Matches in text")
    Set msgHome = ""
    Set dispPhrase = ..escHTML(tPhrase)
    
    If (tMatches > 0)
    {
        Set msgMatches = $$$FormatText($$$T("<b>%1</b> - <b>%2</b> of <b>%3</b> for <b>%4</b>. (%5s)"),(tFirstItem),$S(tMatches<(tFirstItem+tMax-1):tMatches,1:(tFirstItem+tMax-1)),tMatches,dispPhrase,tSearchTime)
        &html<<table class="ZTiming">>
        &html<<tr><td align="left">&nbsp;<a href="DocBook.UI.FramePage.cls">#(msgHome)#</a></td>>
        &html<<td>#(msgResults)#: #(msgMatches)#&nbsp;&nbsp;</td>>
        &html<</tr>>
        &html<</table>>
    }    

    If (tMatches <= 0) {
        Set msgPfx = $$$TH("No matches were found in text for ")
        Set:(tIndexedEntries = 0) msgPfx = $$$TH("No matches were found for ")
        Set msgNada = msgPfx _ dispPhrase _ " (" _ tSearchTime _ "s)"
        &html<<br/><div class="ZMsg">#(msgNada)#</div>>

        Set tGuess = ..DidYouMean(tPhrase)
        Set tDoGuessLang = (##class(DocBook.Utils).UsingJapanese()=0)
        Set tDoGuessTerms = (tGuess '= "")
        Set tNoTitleItems = (tIndexedEntries = 0)
        
        If (0 && tDoGuessLang && tDoGuessTerms && tNoTitleItems) {
            If (tDoGuessTerms) {
                Set msgMean = $$$TH("Did you mean:")
                &html<<br/><div class="ZMsg">#(msgMean)#&nbsp;<a href="DocBook.UI.SearchPageZen.cls?KeyWord=#($ZCVT(tGuess,"O","URL"))#">#(tGuess)#?</a></div>>
            }
        }
        Else {
            Set msgRefine = $$$TH("Please try searching for related terms.")
            &html<<br/><div class="ZMsg">#(msgRefine)#&nbsp;</div>>
        }
        Quit $$$OK
    }

    Set:tDebug tStart = $ZH
    Set msgRanking = $$$TH("Ranking")
    Set tMore = 0
    Set tCount = 0
    Set tRank = $O(^||results(""))
    If (tRank '= "") {
        While (tRank '= "") {
            Set tKey = $O(^||results(tRank,""))
            While (tKey '= "") {
                Set tCount = tCount + 1
                If (tCount>=tFirstItem) {
                    If (tCount>(tFirstItem+tMax)) {
                        Set tMore = 1
                        Quit
                    }
    
                    Set tSampleId = $O(^||results(tRank,tKey,""))

                    &sql(SELECT x__classname INTO :tClass
                        FROM DOCBOOK.block WHERE ID = :tKey)
    
                    Set tContainerKey = ""
                    Set tPath = ..GetCompPath(tKey,.tContainerKey)

                    &html<<div class="ZResult">#(tPath)#>
                    If (tSampleId = "") {
                        
                        #; TODO: The following test can never be true because
                        #; we don't have any idea what el is; its value is never
                        #; set inside this method and is not passed to it. Presumably
                        #; it's the name of the element where the phrase is found.
                        
                        If (",book,chapter,appendix,reference," [ (","_el_",")) {
                            &sql(SELECT subtitle INTO :tSubTitle
                                FROM DOCBOOK.container WHERE ID = :tKey)
                            If (tSubTitle '= "") {
                                Write "<div class=""sample""><i>"
                                Write tSubTitle
                                Write "</i></div>"
                            }
                        }
                        
                        #; TODO: The following test can never be true because
                        #; we don't have any idea what el is; its value is never
                        #; set inside this method and is not passed to it. Presumably
                        #; it's the name of the element where the phrase is found.
                        
                        ElseIf (",refentry," [ (","_el_",")) {
                            &sql(SELECT refmeta_refentrytitle INTO :tSubTitle
                                FROM DOCBOOK.refentry WHERE ID = :tKey)
                            If (tSubTitle '= "") {
                                Write "<div class=""sample""><i>"
                                Write tSubTitle
                                Write "</i></div>"
                            }
                        }
                    }
                    Else {
                        #; show sample entry for this item
                        While (tSampleId '= "") {
                            Do ..ShowItem(tSampleId,tContainerKey)
                            Set tSampleId = $O(^||results(tRank,tKey,tSampleId))
                        }
                    }

                    If (tDebug) {
                        &html<<div class="rank">#(msgRanking)#: #(-tRank)#</div>>
                    }
                    &html<</div>>
                }
                Set tKey = $O(^||results(tRank,tKey))
            }
            Set tRank = $O(^||results(tRank))
        }
    }

    &html<<br/><div class="ZResults" style="text-align:center;">>
    If (tMore || (tFirstItem>1)) {
        If (tFirstItem>1) {
            Set href = "DocBook.UI.SearchPageZen.cls?KeyWord=" _ $ZCVT($ZCVT(tPhrase,"O","UTF8"),"O","URL") _ $S(tBookId="":"",1:"&Book="_$ZCVT(tBookId,"O","URL")) _ "&Num=" _ (tFirstItem - tMax)
            Set msgPrev = $$$TH("Previous")
            &html<&nbsp;<a href="#(href)#">#(msgPrev)#</a>>
        }
        If (tMore) {
            Set href = "DocBook.UI.SearchPageZen.cls?KeyWord=" _ $ZCVT($ZCVT(tPhrase,"O","UTF8"),"O","URL") _ $S(tBookId="":"",1:"&Book="_$ZCVT(tBookId,"O","URL")) _ "&Num=" _ (tFirstItem + tMax)
            Set msgNext = $$$TH("Next")
            &html<&nbsp;<a href="#(href)#">#(msgNext)#</a>>
        }
    }
    Write "&nbsp;<A HREF=""#top"">", $$$T("Top of Page"), "</A>", !
    &html<</div>>

    Write:tDebug "<table class=""ZDebugTable"" border=""0"" cellpadding=""3"" cellspacing=""0"">"
    Write:tDebug "<tr><td>","Output (total):</td><td>",$ZH-tStart,"s</td><td>&nbsp;</td></tr>"
    Write:tDebug "</table>"

    #; test if cache needs to be purged
    Do ..PurgeCache()
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetElementLabel">
<Description>
Given an element name, such as "chapter", return an appropriate text label
to use when displaying the entry in the Search results.
Why is there not one universal utility to get text labels for both Search and Index?
The reason is that the display of Index results is formatted differently
than the display of Search results. Most importantly, the Index results page
serves a different purpose for the reader. That is why
there is one set of text labels for the Search class (encapsulated in this method) 
and a different convention in the DocBook.UI.Index.OnPage() method,
which displays the Index results. Note that this method currently generates
text labels for some items that currently do not show up in the Search results: book, reference, and article.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>el:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
$CASE(el,   "article" : $$$T("Article Title"),
            "book" : $$$T("Book Title"),
            "chapter" : $$$T("Chapter Title"),
            "sect1" : $$$T("Section Title"),
            "sect2" : $$$T("Section Title"),
            "sect3" : $$$T(""),
            "preface" : $$$T("Preface"),
            "refentry" : $$$T("Reference Page"),
            "reference" : $$$T("Reference Section"),
            "appendix" : $$$T("Appendix Title"),
            "glossentry" : $$$T("Definition"),
            "programlisting" : $$$T("Program Listing"),
            "figure" : $$$T("Figure"),
            "table" : $$$T("Table"),
            "informaltable" : $$$T("Table"),
            "block" : $$$T("Index Entry"),
             : "")
]]></Implementation>
</Method>

<Method name="GetElementClass">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>el:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
$CASE(el,   "article" : $$$T(""),
            "book" : $$$T(""),
            "chapter" : $$$T("chapter-title"),
            "sect1" : $$$T("section-title"),
            "sect2" : $$$T("section-title"),
            "sect3" : $$$T(""),
            "preface" : $$$T(""),
            "refentry" : $$$T(""),
            "reference" : $$$T(""),
            "appendix" : $$$T(""),
            "glossentry" : $$$T(""),
            "programlisting" : $$$T(""),
            "figure" : $$$T(""),
            "table" : $$$T(""),
            "informaltable" : $$$T(""),
            "block" : $$$T(""),
             : "")
]]></Implementation>
</Method>

<Method name="CountIndexedEntries">
<Description>
Count the number ofindexed entries</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPhrase:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
    Set pPhrase = $TR(pPhrase," ","")
    Set tKey = " " _ $ZCVT(pPhrase,"U")
    Set tCnt = 0
    
    If $D(^DocBook.Index(tKey)) {
        Set n = $O(^DocBook.Index(tKey,""))
        While (n'="") {
        Set tCnt = tCnt + 1
            Set n = $O(^DocBook.Index(tKey,n))
        }
    }
    Quit tCnt
]]></Implementation>
</Method>

<Method name="ShowIndexedEntries">
<Description>
See if the given phrase is in the *real* index.
If so, draw links.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPhrase:%String</FormalSpec>
<Implementation><![CDATA[
    Set pPhrase = $TR(pPhrase," ","")
    Set tKey = " " _ $ZCVT(pPhrase,"U")
    
    If $D(^DocBook.Index(tKey)) {
        Set n = $O(^DocBook.Index(tKey,""))
        While (n'="") {
            Set caption = $LG(^DocBook.Index(tKey,n),1)
            Set link = $LG(^DocBook.Index(tKey,n),2)
            Set ctitle = $LG(^DocBook.Index(tKey,n),4)
            Set source = ..GetElementLabel($LG(^DocBook.Index(tKey,n),3))

            Set sample = ""
            If (ctitle '="") {
                Set sample = ctitle
            }
            If (source '= "") {
                Set sample = sample _ $S(sample="":"",1:"&nbsp;")
                //_ "<span class=""ElLabel"">(" _ source _ ")</span>"
            }

            &html<<div class="ZResultIndex"><a href="DocBook.UI.FramePage.cls?#(link)#">#(caption)#</a><div class="sample #(..GetElementClass($LG(^DocBook.Index(tKey,n),3)))#">#(sample)#</div></div>>
            Set n = $O(^DocBook.Index(tKey,n))
        }
    }
]]></Implementation>
</Method>

<Method name="DidYouMean">
<Description>
Make a guess at next best phrase.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPhrase:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    Set tResult = ""
    Set gcount = 0
    #; split phrase, test if each word is in the index.
    Set tTermList = ..MakeSearchTerms(pPhrase)
    For i=1:1:$LL(tTermList) {
        Set tWord = $LG(tTermList,i)
        Set tKey = " " _ $ZCVT(tWord,"U")
        Set tKey = $TR(tKey,"""$~!@#^&*()_+-=<>,.?/","")
        If $D(^DocBook.blockI("contentIdx",tKey)) {
            Set tResult = tResult _ $S(tResult="":"",1:" ")_tWord
        }
        Else {
            #; not in index
            Set gcount = gcount + 1

            #; first try permutations
            Set tGuess = ""
            Do ..Permute($E(tKey,2,*),.tPerms)
            Set k = $O(tPerms(""))
            While (k '= "") {
                If $D(^DocBook.blockI("contentIdx",(" "_k))) {
                    Set tGuess = (" "_k)
                    Quit
                }
                Set k = $O(tPerms(k))
            }

            If (tGuess = "") {
                #; else next item in index
                Set tGuess = $O(^DocBook.blockI("contentIdx",$E(tKey,1,$L(tKey)-1)))
                Set:tGuess["&#39;" tGuess = ""
            }
            Set tResult = tResult _ $ZCVT(tGuess,"l")
        }
    }

    Quit $S(gcount:$Zstrip(tResult,"<>W"),1:"")
]]></Implementation>
</Method>

<Method name="Permute">
<Description>
Return set of permutations for the given word.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pWord:%String,*pOut</FormalSpec>
<Implementation><![CDATA[
    Kill pOut
    #; swap
    For p = 1:1:$L(pWord)-1 {
        Set temp = pWord
        Set $E(temp,p)=$E(pWord,p+1)
        Set $E(temp,p+1)=$E(pWord,p)
        Set:temp'="" pOut(temp) = ""
    }
    #; drop
    For p = 1:1:$L(pWord) {
        Set temp = pWord
        Set $E(temp,p)=""
        Set:temp'="" pOut(temp) = ""
    }
]]></Implementation>
</Method>

<Method name="ExecSearch">
<Description>
Execute the word search, place the results into the private 
global, ^||results(rank,id) = "".</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPhrase:%String,*pMatches:%Integer,pDebug:%Integer=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSearchKey = $E($ZCVT(pPhrase,"U"),1,250)

    Set tSC = $$$OK
    Set pMatches = 0

    Try {
        #; look in cache
        If ((tSearchKey '= "")&&($D(^DocBook.SearchCache(tSearchKey)))) {
            Merge ^||results =  ^DocBook.SearchCache(tSearchKey)
            Set pMatches = +$G(^||results)
            #; update time in index
            Do ..UpdateCacheIndex(tSearchKey)
            Quit
        }

        #; search
        Set tSC = ..GetRankedMatches(pPhrase,pDebug)
        If $$$ISERR(tSC) Quit

        #; now sort answers by rank
        Set:pDebug tStart = $ZH
        Set tID = $O(^||ids(""))
        While (tID '= "") {
            Set pMatches = pMatches + 1
            Set tRank = ^||ids(tID)
            Merge ^||results(tRank,tID) = ^||sample(tID)
            Set tID = $O(^||ids(tID))
        }
        
        #; count after merging in case of duplicates
        Set pMatches = 0
        Set xRank = ""
        Set xRank = $O(^||results(xRank))
        While (xRank '= "")
        {
            Set xKey = ""
            Set xKey = $O(^||results(xRank,xKey))
            While (xKey '= "")
            {
                Set pMatches = pMatches  + 1
                Set xKey = $O(^||results(xRank,xKey))
            }
            Set xRank = $O(^||results(xRank))
        }

        #; cache results
        If (tSearchKey '= "") {
            Set ^||results = pMatches
            Kill ^DocBook.SearchCache(tSearchKey)
            Merge ^DocBook.SearchCache(tSearchKey) = ^||results
            Do ..UpdateCacheIndex(tSearchKey)
        }
    }
    Catch(ex) {
        Set tSC = ex.AsStatus()
    }

    Quit tSC
]]></Implementation>
</Method>

<Method name="DrawRecentSearches">
<Description>
Show list of recent searches.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $$$OK
    Set tCols = 3

    Set tCount = 0
    Set tTime = $O(^DocBook.SearchCacheIndex("byTime",""),-1)
    While (tTime'="") {
        Set tKey = $O(^DocBook.SearchCacheIndex("byTime",tTime,""))
        While (tKey'="") {
            Set tMatches = +$G(^DocBook.SearchCache(tKey))
            If (tMatches > 0) {
                Set tBookId = $P(tKey,":",1)
                Set tPhrase = $P(tKey,":",2)
                Set tVal = $ZCVT($ZCVT(tPhrase,"l"),"O","HTML")
                Set:tBookId'="" tVal = tVal _ "&nbsp;(<i>" _ tBookId _ "</i>)"
                Set tCount = tCount + 1
                Set tArgPhrase = $ZCVT($ZCVT(tPhrase,"O","HTML"),"O","JS")
                ;Set tArgPhrase = tPhrase
                Set tArgBookId = $ZCVT($ZCVT(tBookId,"O","HTML"),"O","JS")
                &html<<div class="ZRecent"><a href="javascript:zenPage.research('#(tPhrase)#','#(tArgBookId)#')">#(tVal)#</a> <span class="ZCount">(#(tMatches)#)</span></div>>
            }
            Set tKey = $O(^DocBook.SearchCacheIndex("byTime",tTime,tKey))
        }
        Set tTime = $O(^DocBook.SearchCacheIndex("byTime",tTime),-1)
    }

    Quit tSC
]]></Implementation>
</Method>

<Method name="GetDocumentId">
<Description>
Return the id of the document that contains the given id.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    &sql(SELECT container, x__classname
            INTO :ctr, :cls
            FROM DocBook.block
            WHERE id = :id)

    If (ctr = "") {
        #; we have no container
        Quit id
    }
    Else {
        Set el = ..GetElementName(cls)
        If (",book,chapter,refentry,reference,appendix,"[(","_el_",")) {
            Quit id
        }
        Else {
            Quit ..GetDocumentId(ctr)
        }
    }
]]></Implementation>
</Method>

<Method name="GetCompPath">
<Description>
Get the full component path for the given block.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String,*pContainerKey</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    Set href = "DocBook.UI.FramePage.cls?KEY="
    Set component = ""
    &sql(SELECT title, container, x__classname,blockid
            INTO :title, :ctr, :cls, :blockid
            FROM DocBook.block
            WHERE id = :id)

    If (ctr = "") {
        If (title = "") {
            Quit ""
        }
        Set pre = ""
        If (cls [ "article") {
            Set pre = "<nobr><a href="""_href_"KNBASE"">" _ $$$T("Technical Articles") _ "</a></nobr> &raquo; "
        }
        Set:pContainerKey="" pContainerKey=blockid
        Quit pre _ "<nobr><a href="""_href_blockid_""">" _ title _ "</a></nobr>"
    }
    Else {
        Set:pContainerKey="" pContainerKey=blockid
        Set path = ..GetCompPath(ctr,.pContainerKey)
        Quit path _ $S(title'="":$S(path'= "":" &raquo; ",1:"") _ "<nobr><a href="""_href_blockid_""">"_title_"</a></nobr>",1:"")
    }
]]></Implementation>
</Method>

<Method name="ShowItem">
<Description><![CDATA[
Display an individual search result.
<var>id</var> is the sample to display for the item.
<var>pContainerKey</var> is the key of the container for the item (used to make a link).]]></Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String,pContainerKey:%String</FormalSpec>
<Implementation><![CDATA[
    Set keyword = ""
    &sql(SELECT blockid,content,title,x__classname,container
        INTO :paraKey, :text, :ttl,:cls, :cid
        FROM DocBook.block
        WHERE ID = :id
    )
    
    If (SQLCODE '= 0) {
        Quit
    }

    #; if this block has a title, then it is the container
    If (ttl'="") {
        Set ckey = paraKey
        Set ctitle = ttl
        Set ccontent = text
        Set ccls = cls
    }
    Else {
        #; find reasonable container for the block
        Set found = 0
        While ('found) {
            &sql(SELECT blockid,title,content,x__classname,container
                INTO :ckey, :ctitle, :ccontent,:ccls,:pcid
                FROM DocBook.container
                WHERE ID = :cid
            )
            If ((ctitle'="")||(ccontent'="")||(pcid="")) {
                Set found = 1
            }
            Else {
                Set cid = pcid
            }
        }
    }

    #; special cases for rendering the contents of found items
    Set listing = 0
    Set hidden = 0
    Set rtext = ""
    If (cls [ "programlisting") {
        Set listing = 1
        Set rtext = ""
        &sql(SELECT renderedContent
            INTO :rtext
            FROM DocBook.programlisting
            WHERE ID = :id
        )
    }
    ElseIf (cls [ "anchor") {
        #; Don't display it
        Set hidden = 1
    }
    ElseIf (cls [ "sect2")||(cls [ "sect3") {
        #; Allow lower sections to display in their full context 
        #; (include the full surrounding chapter in the display)
        Set ckey = pContainerKey
    }

    #; display the search result
    If ((text'="")||(rtext'="")||(ttl'="")) {      

        Set tLbl = ""
        
        #; Get the name of the element that contains the search term.
        #; Get name for important things that don't have titles
        If ((cls [ "programlisting")||(cls [ "informaltable")) {
            Set el = ..GetElementName(cls)
        }
        #; Get name for important things that do have titles
        Else {          
            Set el = ..GetElementName(ccls)
        }
        &html<<div class="sample #(..GetElementClass(el))#">>
        #; Now get the label
        If (el '= "") {
            Set tLabel = ..GetElementLabel(el)
            If (tLabel '= "") {
                Set tLbl = "&nbsp;<span class=""ElLabel"">(" _ tLabel _ ")</span>"
            }
        }

        #; local heading
        Set head = ""
        If (ttl '= "") {
            Set head = ttl
        }
        ElseIf (ctitle '= "") {
            Set head = ctitle
        }
        ElseIf (ccontent '="") {
            Set head = ccontent
        }

        If (head '= "") {
            Set href = "DocBook.UI.FramePage.cls?KEY="
            If (pContainerKey'=ckey) {
                Set link = href_pContainerKey_"#"_ckey
            }
            Else {
                Set link = href_pContainerKey_"#"_paraKey
            }
            &html<<div class="subhead"><a href="#(link)#">#(head)#</a></div>>
            //&html<<div class="subhead"><a href="#(link)#">#(head)#</a>#(tLbl)#</div>>
        }

        If (listing) {
            If (rtext = "") {
                Write "<pre>",text,"</pre>",!
            }
            Else {
                Write rtext,!
            }
        }
        Else {
            #; If we are returning too much data just display the relevant section
            If $length(text)>3000 {
                Set upper=$zconvert(text,"U"),upkeyword=$zconvert(keyword,"U")
                Set pos=1,len=$length(keyword)
                #; Special case for tables to try and preserve table formatting
                If $extract(upper,1,7)="<TGROUP",upper["</THEAD>" {
                    #; Find the table header
                    Set pos=$find(upper,"</THEAD>")
                    Set head=$extract(text,1,pos-1)
                    Set output=""
                    #; Now output this cut down table !!!
                    If output'="" Do ##class(DocBook.Renderer).RenderText(head_"<tbody>"_output_"</tbody></tgroup>","")
                }
                Else {
                    #; Set text=..StripTags(text)
                    #; Do ##class(DocBook.Renderer).RenderText(text)
                    Do ##class(DocBook.Renderer).RenderText(text,keyword,,,1)
                }
            }
            #; hide text that doesn't help, such as text from anchor elements
            ElseIf hidden {}
            Else {
                Do ##class(DocBook.Renderer).RenderText(text,keyword,,,1)
            }
        }
        &html<</div>>
    }
]]></Implementation>
</Method>

<Method name="StripTags">
<Description>
Remove markup from the given string.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>text:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    Set output=""
    Set pos=$find(text,"<",1)
    While pos {
        Set pos2=$find(text,">",pos)
        Set pos=$find(text,"<",pos)
        Set output=output_$extract(text,pos2,pos-2)_" "
    }
    Quit output
]]></Implementation>
</Method>

<Method name="GetElementName">
<Description>
Given the class name returned by an SQL statement (x__classname), return
the DocBook element name.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>pClass:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[$P($P(pClass,"~",$L(pClass,"~")-1),".",2)
]]></Implementation>
</Method>

<Method name="PurgeCache">
<Description>
Purge search items older than 14 days.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    Set tNow = +$H
    If (tNow > +$G(^DocBook.SearchCacheIndex)) {
        #; remember time of last purge
        Set ^DocBook.SearchCacheIndex = $H
        Set tTime = $O(^DocBook.SearchCacheIndex("byTime",""))
        While (tTime'="") {
            If ((tNow - tTime) > 14) {
                Set tKey = $O(^DocBook.SearchCacheIndex("byTime",tTime,""))
                While (tKey '= "") {
                    Kill ^DocBook.SearchCacheIndex("byKey",tKey)
                    Kill ^DocBook.SearchCacheIndex("byTime",tTime,tKey)
                    Kill ^DocBook.SearchCache(tKey)
                    Set tKey = $O(^DocBook.SearchCacheIndex("byTime",tTime,tKey))
                }
            }
            Set tTime = $O(^DocBook.SearchCacheIndex("byTime",tTime))
        }
    }
]]></Implementation>
</Method>

<Method name="UpdateCacheIndex">
<Description>
Update the cache index for the given search key term.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pSearchKey:%String</FormalSpec>
<Implementation><![CDATA[
    If (pSearchKey="") {
        Quit
    }

    #; Index structure:
    #; ^DocBook.SearchCacheIndex("byKey",tSearchKey) = $H
    #; ^DocBook.SearchCacheIndex("byTime",+$H,tSearchKey) = ""

    Lock +^DocBook.SearchCacheIndex(pSearchKey):5
    If '$T Quit

    #; remove old entry
    If $D(^DocBook.SearchCacheIndex("byKey",pSearchKey)) {
        Set tThen = $G(^DocBook.SearchCacheIndex("byKey",pSearchKey))
        Kill:tThen'="" ^DocBook.SearchCacheIndex("byTime",+tThen,pSearchKey)
    }

    #; set new entry
    Set tNow = $H
    Set ^DocBook.SearchCacheIndex("byKey",pSearchKey) = tNow
    Set ^DocBook.SearchCacheIndex("byTime",+tNow,pSearchKey) = ""
    Lock -^DocBook.SearchCacheIndex(pSearchKey)
]]></Implementation>
</Method>

<Method name="ClearCache">
<Description>
Clear out search cache.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    Kill ^DocBook.SearchCacheIndex
    Kill ^DocBook.SearchCache
]]></Implementation>
</Method>

<Method name="%OnSubmit">
<Description><![CDATA[
This callback is called when a form on this page is submitted.
<var>pSubmit</var> is a <class>%ZEN.Submit</class> object
containing details of the form submit.<br>
Subclasses override this method.]]></Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pSubmit:%ZEN.Submit</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    If (pSubmit.%GetValue("KeyWord")="") {
        Kill %response.Context("KeyWord")
    }
    Else {
        Set %response.Context("KeyWord") = pSubmit.%GetValue("KeyWord")
    }
    If (pSubmit.%GetValue("Book")="") {
        Kill %response.Context("Book")
    }
    Else {
        Set %response.Context("Book") = pSubmit.%GetValue("Book")
    }
    Quit $$$OK
]]></Implementation>
</Method>

<Query name="EnumerateSearchTerms">
<Description><![CDATA[
List words in the index of words that start with <var>pKey</var>.]]></Description>
<Type>%Query</Type>
<FormalSpec>pKey:%String=""</FormalSpec>
<Parameter name="ROWSPEC" value="Word:%String"/>
</Query>

<Method name="EnumerateSearchTermsExecute">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,pKey:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set qHandle("stem") = $P(pKey," ",1,$L(pKey," ")-1)
    Set pKey = $P(pKey," ",$L(pKey," ")) // last word only

    Set pKey = $TR(pKey,"""~!@#^&*()-+=/?,.<>","")
    Set:pKey="" pKey="a"
    Set qHandle("search") = " " _ $ZCVT(pKey,"U")

    Set qHandle("key") = " " _ $ZCVT(pKey,"U")
    Set qHandle("count") = 0
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="EnumerateSearchTermsFetch">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>EnumerateSearchTermsExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set qHandle("key") = $O(^DocBook.blockI("contentIdx",qHandle("key")))
    If ((qHandle("search")'=" ") && (qHandle("count")<300) && (qHandle("key")'="") && ($E(qHandle("key"),1,$L(qHandle("search"))) = qHandle("search"))) {
        Set qHandle("count") = qHandle("count") + 1
        Set Row = $LB($S(qHandle("stem")="":"",1:qHandle("stem")_" ") _ $ZCVT($E(qHandle("key"),2,*),"L"))
        Set AtEnd = 0
    }
    Else {
        Set Row = ""
        Set AtEnd = 1
    }
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="EnumerateSearchTermsClose">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>EnumerateSearchTermsExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[   Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetRankedMatches">
<Description><![CDATA[
Execute the word search algorithm.
Place the results into process private globals:<br>
^||id(id) = -rank: contains ids (of containers) in ranked order.
^||sample(tContainer,id) = "": contains a sample matching id.]]></Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPhrase:%String,pDebug:%Integer=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $$$OK

    Try {
        Set tBookId = $P(pPhrase,":",1)
        Set pPhrase = $P(pPhrase,":",2)

        #; relative weight for different elements
        Set elwgt("book") =  300
        Set elwgt("reference") =  200
        Set elwgt("article") =  120
        Set elwgt("qandadiv") =  100
        Set elwgt("answer") =  100
        Set elwgt("question") =  100
        Set elwgt("refentry") =  80
        Set elwgt("chapter") =  80
        Set elwgt("appendix") =  80
        Set elwgt("sect1") =  70
        Set elwgt("sect2") =  60
        Set elwgt("sect3") =  50
        Set elwgt("figure") =  40
        Set elwgt("synopsis") =  35
        Set elwgt("refpurpose") =  15
        Set elwgt("programlisting") =  10
        Set elwgt("table") =  3  // hard to disambiguate table title from content!

        #; split phrase into words
        Set tWORDS = ""
        Set tTermList = ..MakeSearchTerms(pPhrase)
        Set tMaxTerms = 99
        Set tTermCnt = $LL(tTermList)
        Set:(tTermCnt > tMaxTerms) tTermCnt = tMaxTerms
        For i=1:1:tTermCnt {
            Set w = $LG(tTermList,i)
            Set w = $TR(w,"'""","") // make sure there are no 's in the word
            Set tWORDS = tWORDS _ $S(tWORDS'="":",",1:"")_"'"_w_"'"
        }

        #; test for quoted words
        Set tTitleContains = ""
        Set tContentContains = ""
        Do ..FindQuotedStrings(pPhrase, .tQuotes)
        Set k = $O(tQuotes(""))
        While (k '= "") {
            Set tTitleContains = tTitleContains _ $S(tTitleContains'="":" AND ",1:"")_"UPPER(title) ['"_$ZCVT(k,"U")_"'"
            Set tContentContains = tContentContains _ $S(tContentContains'="":" AND ",1:"")_"UPPER(content) ['"_$ZCVT(k,"U")_"'"
            Set k = $O(tQuotes(k))
        }
        Set:tTitleContains'="" tTitleContains = " AND (" _ tTitleContains _ ")"
        Set:tContentContains'="" tContentContains = " AND (" _ tContentContains _ ")"

        If (tWORDS '= "") {
            #; search on titles OR content
            Set:pDebug tStart = $ZH
            Set tRS = ##class(%ResultSet).%New()
            //Set tSQL = "SELECT TOP 10000 ID,x__classname,"_$S(pDebug>1:"title,",1:"")_"component compId,CASE WHEN title IS null then 'content' Else 'title' END source from DOCBOOK.block WHERE ((title %CONTAINSTERM("_tWORDS_")"_tTitleContains_") OR (content %CONTAINSTERM("_tWORDS_")"_tContentContains_"))"
            Set tSQL = "SELECT " _
                       "TOP 10000 " _
                       "ID, " _
                       "x__classname, " _
                       $S(pDebug>1:"title, ",1:"") _
                       "component compId, " _ 
                       "CASE WHEN title IS null then 'content' Else 'title' END " _ 
                       "source " _
                       "FROM " _
                       "DOCBOOK.block " _
                       "WHERE " _ 
                       "((title %CONTAINSTERM(" _ tWORDS _ ")" _ tTitleContains _ ") " _
                       "OR " _ 
                       "(content %CONTAINSTERM(" _ tWORDS _ ")" _ tContentContains _ "))"
            Set:tBookId'="" tSQL = tSQL _ " AND book->blockid = ?"
            Set tSC = tRS.Prepare(tSQL)
            If $$$ISERR(tSC) Quit
            Set tSC = tRS.Execute(tBookId)
            If $$$ISERR(tSC) Quit
    
            Set c = 0
            While (tRS.Next()) {
                Set c = c + 1
                Set source = tRS.Data("source")
                Set el = ..GetElementName(tRS.Data("x__classname"))
                Set:el="" el="Misc"
    
                Set tID = tRS.Data("ID")
                Set tBucket = tRS.Data("compId")
                Set:tBucket="" tBucket = tID
    
                If (source = "title") {
                    Set weight = $G(elwgt(el),20)
                    Write:(pDebug>1) "<tr><td>title: ",$G(tRS.Data("title")),"</td><td>",el,"</td><td>b: ",tBucket,"</td><td>wgt: ",weight,"</td><td>id: ",tID,"</td></tr>"

                    Set x = $I(^||ids(tBucket),-weight)
                    If (tBucket'=tID) {
                        Set ^||sample(tBucket,tID) = ""
                    }
                }
                Else {
                    Set weight = $G(elwgt(el),1)
                    Write:(pDebug>1) "<tr><td>cont: <pre>",$G(tRS.Data("content")),"</pre></td><td>",el,"</td><td>b: ",tBucket,"</td><td>wgt: ",weight,"</td><td>id: ",tID,"</td></tr>"

                    Set x = $I(^||ids(tBucket),-weight)
                    If ('$D(^||sample(tBucket))) {
                        Set ^||sample(tBucket,tID) = ""
                    }
                }
            }
            Write:pDebug "<tr><td>","Search:</td><td>",$ZH-tStart,"s</td><td>",$G(c),"</td><td>",$G(tSQL),"</td></tr>"
        }
    }
    Catch(ex) {
        Set tSC = ex.AsStatus()
    }

    Quit tSC
]]></Implementation>
</Method>

<Method name="FindQuotedStrings">
<Description>
Find quoted strings with phrase.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPhrase:%String,*pWords</FormalSpec>
<Implementation><![CDATA[
    #; look for quoted strings in phrase
    Set inquote = 0
    Set start = 0
    Set p = 0
    Set p = $Find(pPhrase,"""",p)
    While (p '= 0) {
        If (inquote) {
            Set w = $E(pPhrase,start,p-2)
            Set:w'="" pWords(w)=""
            Set inquote = 0
        }
        Else {
            Set start = p
            Set inquote = 1
        }
        Set p = $Find(pPhrase,"""",p)
    }
]]></Implementation>
</Method>

<Method name="MakeSearchTerms">
<Description>
Wrapper for MakeSearchTerms method in text index class.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPhrase:%String</FormalSpec>
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[
    #; dispatch to run-time specified language class
    Set tLangClass = $G(^DocBook.Config("INDEXCLASS"),"DocBook.IndexedText")
    Quit $CLASSMETHOD(tLangClass,"MakeSearchTerms",pPhrase)
]]></Implementation>
</Method>
</Class>
</Export>
