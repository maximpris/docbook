<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<CSP name="doctypes/axdocbook/htmlhelp.xsl" application="/csp/docbook/" default="1"><![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<!--Copyright ArborText, Inc., 1999-2001-->
<!DOCTYPE xsl:stylesheet>

<?APT StylesheetID Title="DocBook HTML Help" CompositionTypes="htmlhelp,xsl"?>

<xsl:stylesheet
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
  xmlns:doc="http://nwalsh.com/xsl/documentation/1.0"
  xmlns:stbl="http://nwalsh.com/xslt/ext/com.nwalsh.saxon.Table"
  xmlns:xtbl="com.nwalsh.xalan.Table"
  xmlns:lxslt="http://xml.apache.org/xslt"
  exclude-result-prefixes="doc stbl xtbl lxslt"
  version="1.0">

<xsl:import href="../xdocbook/xsl/htmlhelp/htmlhelp.xsl"/>
<xsl:include href="../../lib/xsl/common/version.xsl"/>
<xsl:output method="html"/>

<!-- ****** Set default htmlhelp.encoding to windows-1252 ***** -->
<xsl:param name="htmlhelp.encoding" select="'windows-1252'"/>

<xsl:variable name="using.chunker" select="true()"/>
<xsl:variable name="generate.set.toc" select="false()"/>
<xsl:variable name="generate.book.toc" select="false()"/>

<!-- ******** Set toc generation parameter *********
     Since toc will be generated by chunker in comp for html,
     it is redundant to be generated again in content body.
     Here we set generate.toc to empty, so no toc will be generated.
     The following is the default settings for toc:
	<xsl:param name="generate.toc">
	set       toc
	book      toc,figure,table,example,equation
	/preface  toc
	/chapter  toc
	/appendix toc
	/article  toc
	/section  toc
	/part     toc,figure,example,table,equation
	/reference toc,figure,example,table,equation
	</xsl:param>
	****************************                       -->

<xsl:param name="generate.toc"/>

<!-- Redefine user.head.content to emit some customized effects:
     1.  emit a meta tag insert epic application information.
     2.  emit some style info:
         a.  make all titles blue
         b.  nothing else yet, but room for expansion.
-->
<xsl:template name="user.head.content">
  <xsl:param name="node" select="."/>
  <meta name="generator" content="{$generator-product-name} {$generator-version-no}"/>
  <style type="text/css">h1, h2, h3, h4, h5 {color: blue}</style>
</xsl:template>

<!-- Arbortext has a graphics conversion process that results in the image being
     scaled so we need to override the usual processing so we don't scale twice. -->

<xsl:template name="process.image">
  <!-- When this template is called, the current node should be  -->
  <!-- a graphic, inlinegraphic, imagedata, or videodata. All    -->
  <!-- those elements have the same set of attributes, so we can -->
  <!-- handle them all in one place.                             -->
  <xsl:param name="tag" select="'img'"/>
  <xsl:param name="alt"/>

  <xsl:variable name="input-filename">
    <xsl:choose>
      <xsl:when test="@entityref">
        <xsl:value-of select="unparsed-entity-uri(@entityref)"/>
      </xsl:when>
      <xsl:when test="@fileref">
        <xsl:value-of select="@fileref"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:message>
          <xsl:text>Expected @entityref or @fileref on </xsl:text>
          <xsl:value-of select="name(.)"/>
        </xsl:message>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:variable>

  <xsl:variable name="fileext">
    <xsl:call-template name="filename-extension">
      <xsl:with-param name="filename" select="$input-filename"/>
    </xsl:call-template>
  </xsl:variable>

  <xsl:variable name="filename">
    <xsl:choose>
      <xsl:when test="$fileext != ''">
        <xsl:value-of select="$input-filename"/>
      </xsl:when>
      <xsl:when test="$graphic.default.extension != ''">
        <xsl:value-of select="$input-filename"/>
        <xsl:value-of select="$graphic.default.extension"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$input-filename"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:variable>

  <xsl:variable name="width">
    <xsl:choose>
      <xsl:when test="@width"><xsl:value-of select="@width"/></xsl:when>
      <xsl:otherwise></xsl:otherwise>
    </xsl:choose>
  </xsl:variable>

  <xsl:variable name="height">
    <xsl:choose>
      <xsl:when test="@depth"><xsl:value-of select="@depth"/></xsl:when>
      <xsl:otherwise></xsl:otherwise>
    </xsl:choose>
  </xsl:variable>

  <xsl:variable name="align">
    <xsl:value-of select="@align"/>
  </xsl:variable>

  <xsl:element name="{$tag}">
    <xsl:attribute name="src">
      <xsl:value-of select="$filename"/>
    </xsl:attribute>

    <xsl:if test="$align != ''">
      <xsl:attribute name="align">
        <xsl:value-of select="$align"/>
      </xsl:attribute>
    </xsl:if>
    <xsl:if test="$height != ''">
      <xsl:attribute name="height">
        <xsl:value-of select="$height"/>
      </xsl:attribute>
    </xsl:if>
    <xsl:if test="$width != ''">
      <xsl:attribute name="width">
        <xsl:value-of select="$width"/>
      </xsl:attribute>
    </xsl:if>
    <xsl:if test="$alt != ''">
      <xsl:attribute name="alt">
        <xsl:value-of select="$alt"/>
      </xsl:attribute>
    </xsl:if>
  </xsl:element>
</xsl:template>

<!-- ==================================================================== -->
<!-- The next two templates are overridden to place                       -->
<!-- the top-level element as a sibling to the remaining elements         -->
<!-- ==================================================================== -->

<xsl:template match="set" mode="hhc">
  <xsl:variable name="title">
    <xsl:apply-templates select="." mode="title.markup"/>
  </xsl:variable>

  <xsl:text>&lt;LI&gt; &lt;OBJECT type="text/sitemap"&gt;
    &lt;param name="Name" value="</xsl:text>
	<xsl:value-of select="$title"/>
    <xsl:text>"&gt;
    &lt;param name="Local" value="</xsl:text>
	<xsl:call-template name="href.target.with.base.dir"/>
    <xsl:text>"&gt;
  &lt;/OBJECT&gt;</xsl:text>
  <xsl:if test="book">
    <xsl:if test="generate-id(..) != generate-id(/)">
      <xsl:text>&lt;UL&gt;</xsl:text>
    </xsl:if>

      <xsl:apply-templates select="book" mode="hhc"/>

    <xsl:if test="generate-id(..) != generate-id(/)">
      <xsl:text>&lt;/UL&gt;</xsl:text>
    </xsl:if>
  </xsl:if>
</xsl:template>

<xsl:template match="book" mode="hhc">
  <xsl:variable name="title">
    <xsl:apply-templates select="." mode="title.markup"/>
  </xsl:variable>

  <xsl:text>&lt;LI&gt; &lt;OBJECT type="text/sitemap"&gt;
    &lt;param name="Name" value="</xsl:text>
	<xsl:value-of select="$title"/>
    <xsl:text>"&gt;
    &lt;param name="Local" value="</xsl:text>
	<xsl:call-template name="href.target.with.base.dir"/>
    <xsl:text>"&gt;
  &lt;/OBJECT&gt;</xsl:text>
  <xsl:if test="part|reference|preface|chapter|appendix|article|colophon">
    <xsl:if test="generate-id(..) != generate-id(/)">
      <xsl:text>&lt;UL&gt;</xsl:text>
    </xsl:if>

      <xsl:apply-templates 
              select="part|reference|preface|chapter|appendix|article|colophon"
			   mode="hhc"/>

    <xsl:if test="generate-id(..) != generate-id(/)">
      <xsl:text>&lt;/UL&gt;</xsl:text>
    </xsl:if>
  </xsl:if>
</xsl:template>

</xsl:stylesheet>

]]></CSP>
</Export>
